//// day1

to create html file type html:5 and tab

document.createElement("h1"); to create html element in javascript

const heading = document.createElement("h1"); // for creation of h1 tag
heading.innerHTML = "hello world from javascript"; putting value in h1 tag
const root = document.getElementById("root"); find div with id root.
root.appendChild(heading); passing h1 to it.

what is cdn? content dilvery network.

what is crossorigin in react cdn.
<script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
this core file for react.

<script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
this is dom manipulation.

why not club together bzc react work on both web & phone

a) const heading = React.createElement("h1",{//place for attribute like id:"heading" for h1 tag },"Hello world from react"); // here we have used react feature bzc that work of react to create element
b) const root = ReactDom.createRoot(document.getElementById("root")); // but here we have we used react dome bzc that work dom to interact with html stuff
C) root.render(heading); // normal reader part. render convert all react code to html part.

above a & b statement are javascript object, until they are render.
most costly operation in web in add and delete of node and to manuplate it.

React.createElement => object,
reader = html(browser understands)

[React.createElement("h1",{id:"heading1"},"I am h1 tag."),React.createElement("h2",{},"I am h2 tag.")]
for multiple children create array of children.

but it can become headace when it is to much nested element for that reason we have JSX

sequence of file is imp
bzc react
    ReactDom
    app.js



what is diff btw development and production react.js cdn
react replace everything in root with it.
react is library.
it can work wherever it is called.
framework where whole app should developed with but react can be injected in per existing code of js

// day2

npm is package manager
npm manage dependency version.
package.json is configuration for npm.
most imp package is bundler.
like vite , webpack ,parcel etc.


npm install -D parcel
what is -D one dev dependency
and other normal dependency 

parcel is beast for management
"parcel": "^2.13.0"
^ is called crat, it will automatic update minior update
` is called as tilday for major vesion update automatic.

diff package.json= approx version and package-lock.json => proper version.
node_modules contain actual data of dependency.
node_modules also have transitive dependency

every lib have there own dependency. like package.json.

if we don't want to put some file in production.

if we have  package-lock and package.json on git bzc we can create, no need of node_modules.

to start app with parcel
command npx parcel index.html
npx mean ecute package.

when we use react by install react not by cdn
then we have mention type in script tag as module.
like this <script type="module" src="./app.js">;

parcel offer:-
    - Dev Build
    - Local Server creation
    - refresh page, or doing HMR => Hot Module Replacement.
    - Pacel use file watching algorithm to make change so fast. which is written in c++.
    - it gives faster build for you - by caching.
    - Image optimization for image loading as it expensive.
    - Minification of file
    - Bundling
    - compress of file.
    - consistent hashing (read about it)
    - code splitting
    - differential Bundling - to support old browser
    - diagnostic
    - Error handling
    - it also support host on https
    - *** read parcel documentation
    - tree shaking algorithm - will remove unused code.
    - differential build for dev(less optmize) and production(prod build)
    
    {  ** error area
        4 |   "description": "this namaste react by suresh
        > 5 |   "main": "app.js",
        >   |           ^^^^^^^^ Did you mean "app.html"?   
         6 |   "scripts": {
        7 |     "test": "jest"

    }
        when we use npx parcel build index.html and our package.json have entry point and main.
        then it error.
        bzc parcel dont't need it.
        prod build is highly optimize build.
    
    dist fill is created for fast working

How to make project old browser support ready.
by browser list.
go on browserlist.dev

in package.json 
add new object named browserList.


/// day 3

how to npm script:
    - create script in package.json
    - then script object.

    per npx parcel index.html

    "start":"parcel index.html",
    "build":"parcel build index.html"

    after npm run start  or  npm start also work
    npm build won't work


React element are equilvalent to react-dom element.
React element is at the end is object.

normal react code become to clumsy to react.
so jsx was developed to help react dev fast.


// below is jsx way to make html element in react.
const jsxheading = <h1>suresh is daddy of coding ðŸ’€</h1>

jsx is html like syntax or closure to XML, not html.

jsx is not pure javascript, bzc js understand ecamascript.
so here webpack(parcel) is doing work, it transpile jsx code befor it go jsengine.
jsx code is transpile befor it go to JS Engine.
transpile is done by parcel.
but parcel is manager and actual work is done by babel.

this follow of React
React.createElement => ReactElement- JS Object => HTML-Element(render)

this follow for JSX
JSX => babel transpliles it to React.createElement => ReactElement- JS Object => HTML-Element(render).

Read more about babel, which is javascript compiler.

In Html we have class and in jsx we have className.
In Jsx attribute are given in camelcase format.

explore various attribute for tag in jsx.
multiple line jsx should be wrap in () brackets, for babel to understand it.


*** React Component
Types of React component
    - Class based components - old way of writting of code.
    - Functional based componens - New way of components. most used one.
        - there is short hand way for this.
        -React function based component is just javascript functional.
        Name it with capital letter it is react way to get now it is component.

what is component composition
 - it means to put one component inside another.
    example
    const HeadingComponent3 = () =>(
        <div id="container">
            <HeadingComponent2/>
            <h1> this is React Functional based component fir seeðŸ’€.</h1>
        </div>
    
    );

 ***
 // at end of the day it all javascript so basic fund is same for const and call element, sequenceing element.

if some attacker can run some js file in our pc then it is called as cross-site scripting.
it can steal cookies. can read local storage and many more.
by injections attact by bad api.
but jsx take care of it by santize data, when it is enclose in '{}' this brackets.

*** React component ***
    -<reactComponent/>
    -<reactComponent></reactComponent>
    {reactComponent()}

    this 3 way are same.

    and react Component are basically arrow function so
    we can call this way also
    {reactComponent()}

jsx is making our code more readable. 

// day4

Notes or tips :- Before building anything plan.
FooDQ
    - make ui design or outline of design.

design structure
    - Header
        - logo
        - nav link
    - Body
        - search
        - restaurant card container
            - restaurant card
                - Image
                - Nave shop
                - star rating
                - cuisine, devlivery time.

    - Footer
        - Copyright
        - Links
        - Address
        - Contact
we can write css inside jsx

by making element or direct way.
    const StyleCard = {
    backgroundColor:"#f0f0f0",
    }
    <div className="res-card"style={StyleCard}>

    or

    <div className="res-card"style={{backgroundColor:"#f0f0f0",}}>


props
 props are basically properties which we can pass dynamically to function.

 props => to component
 is similar to passing 
 passing argument to function.

 dynamically data passing is by props

 in arrow function you pass (props) // which multiple value together
calling of it: {props.resName} at data place

 or ({resName, cuisine}) in this also 

 {resName} at data place

 swiggy have config driven UI
    - controling UI with Data which is coming from server.

ui layer + data layer is equal to good software engineer.


for online hosting of image for large scale project we can use cloudnary cdn. 

                This dynamic calling of data. learn more of map, reduce, filter   
                // whenever we use looping property give key proprety to identify component.

                what is use of key in looping process?
                why we need keys.
                    - if don't have key then react don't know is new card.
                        and it will re render all of them.

                    but if have unique id then we have cache of it.
                    whenever have map and keys.

                    *** Never use index as keys by react doc.
                resList.map((restaurant) => (<RestaurentCard key={restaurant.id} resData={restaurant}/>))

# React Blog for file structure.
            
    Name file porperly
    or file name same as component name.

    .js or .jsx or .tsx are same only.


    Never Keep hard coded data in component folder.
    also hard code string link also.

    keep them in util or comman, config or constant this are type of file name.

Ways of Import and Export:-
    - defualt where component exported
    - named any link or multiple thing.

Named expo & Impo
    - export const Some_URL = "something";


    Importing syntax
    - import {Some_URL} from "../../utils/contants"

can we apply both method on impo & expo on something at same time.


## *** React Hookes.


// Noraml js variable

let ListOfRestaurants = []

// State variable - super powerful variable with react power.
    - for that we use react hook
        a hook normzal is js element.

# React hook
    Normal JS utility function in side react file.

    2 imp hook
        - useState() - superpowerful state variable in react.
        - useEffect()

whenever State variable update react re render component.

React algorithm 
    react uses Reconciliation algorithm
    - which is also called as react fiber

    -react create virtual dom (which representation of actual dom)
        which object like react element.

        virtual dom is object of dom.

dif algorithm 
    
    - find out diffrence between old and new virtual dom.
     finding diff in object is easy and fast.
    
    it dose not touch html dom structure.
calculate diff and update.

virtual dom fast manupilation is real power of react. that core funda.

Incremental readering is also to make fast.
read React Fiber Architecture.

In React 16 new algo came for updatation virtual dom was react fiber.

EP 5 is full of knowledge.


// day 4 ep 6 & ep7

Design Architecture:
    - Monolith 
        - Everything code in same service.



    - macrosrvice
        
        different service for diif work made difrently.

        microservice is know as separation of concern or single responsiblility principle.

        backend , frontend , data all diffrenet.  


microservice 
    you can have diffrenet teck stack for diffrent for diffrenet service.

  BE   <=> UI  AUTH
|| \\
DB   SM  GMAIL


HOW deployed and HOW to axcess or interact. 
    - by port calling.

ALL service run on there perticular port.
OUR UI in REACT.

Tow approuch for API calling data fetching from backend.

    1* Loads => api call(wait 500 ms) => render
    2* Loads => Render(what we have) => api call(wait 500 ms) => Render. (Better appro and Better UX give)

REACT HOOK is normal JS Function.

useEffect[() => {},[]]
useEffect have two argument.
    - arrow function
    - dependency array.

useEffect Hook working
    - first the component get loaded fully.
    then useEffect function is called.
    then new data load.

CORS Policy. which by our browser. due to origin change conflict.


shimmer ui to remove boring loading stuff.

for ui project use shimmer UI. for better loading screen.

// conditional rendering by ternary operation
return ListOfRestaurants.length === 0 ? <Shimmer/> :(
    <div className="body">


local javascript variable:
    they don't change dynamically to UI.
    for that purpose useState.
but in useState variable we can track state of variable for updation purpose.
useState variable re render whole component.
    but only change diff part by diff algo.


Blinding concept is use in search box.
const [searchText, setsearchText] = useState("");
<input type="text" className='search-box' value={searchText} //here blinding is doen onChange={ (e) => {
                        searchText(e.target.value);
                        // onChange handle for updation of value
                    }}/>
                    <button onClick={() => {
                        // Filter the restraunt cards and update the UI.
                        // search text.

                    }}>search</button>


// whenever State variable update, react triggers a Reconciliation cycle(re- renders the Component)
 but only change part by diff algo.  

//day6.
 
// never create useState outside component and create at top inside inside functional component.
    // never create hook inside if else loop. it will create inconsistency.
    const [btnNameReact, setbtnNameReact ] = useState("login");

    // If no dependency array => useEffect is called on every rendering(basic nauture).
    // If dependency array is empty = [] => useEffect is called on initial render(just once).
    // If dependency array is [dependency] => called everytime dependency is updated.

// For routing purpose we use react lib which is
    react router dom 
    npm i react-router-dom

for developing route we have to create route configuration. 

react-router-dom gives acess to importent hook named:
    - useRouteError it gives info of error, to get more clearity.

children route concept:-

    - {
        path:"/",
        element: <AppLayout/>,
        Children: [

            // this child routing where some remain part ramain constant and some render
            like header remain same but lower body change
            {
                path:"/about",
                element: <About/>,
        
            },
            {
                path:"/Contact",
                element:<Contact />,
            }

        ],
        errorElement: <Error />, 
    },

    // main routing 
    {
        path:"/about",
        element: <About/>,

    },
    {
        path:"/Contact",
        element:<Contact />,
    }

    <Header/>
            {/** if path = / */}
            <Body/>
            {/** if path = /about */}
            <About />
            {/** if path = /contact */}
            <Contact />
 when you are with react and we want route some page never use a tag
    - reason :  bcz whole page refresh.

    use 
    link which is given by react-route-dom.
    Link is warpper over a tag.

    due to link funda react application are called as single page application.

    there are type of routing in web app.
        - Client side routing.
            all component all ready loader it render whenever need.
            why client side routing.

        - Server side routing.
            it relode whole , basically make network call.

let see dynamic routing. 


// Read about graphQL for overfectching and underfetching. 

const { resId } = useParams(); dynamic use of it.

params.

// Class Based Component.

In class based component way we write super props

Use this key word to acess props in class based component. 
// Never update state variables directly.

Render cycle method in class based component.

Mounting and loading are same it update on webpage.  

in class based component:
    - first constructor is called
    - then render called.

    cache is in componentDidMount();   // read more about it.

    use of componentDidMount
        - for making api call.

        thing which are done only after component is mounted.


react life cycle diagram. 
    - render phase
        - constructure
        - render
    <dom is updated> in single batch. by diff algo. 
    - commit phase
        - react update
        - componentDidMount.

    phase batch together for more optimization. for mutliple children.
    bcz dom manipulation is expensive for that reason.

why i can not use asyn in useEffect and useState.


// how to make app fast ep 9

1> single responsiblility principle. one work to one component.
- code resuble
maintainable

testable.

keep component light wieghted.

// custom hook. - code more readable and useable.


for custom hook first finalized contract.

like input and output.

props is input amd return is output.

collor mean where this hook would be used.


we can simulate offline case in inspect only by network and no throlleling

learn about linter.

make aap down in smaller pices. like small logical  bundle. pr chunking.
lazy loading, dynamic bundling and code splitting.
on demand loading.
  
 



 